// copied from db/Site.ts
export interface LinkItem {
  title: string
  url: string
  links: LinkItem[]
}

export interface Cart {
  items: CartItem[]
}

export interface Locale {
  country: {
    code: string,
    name: string,
  },
  currency: {
    code: string,
    name: string
    symbol: string,
    decimals: number,
    display: "code" | "symbol" | "narrowSymbol" | "name" | boolean,
    grouping: "min2" | "auto" | "always" | boolean
  },
  language: {
    code: string,
    name: string,
  }
}


export interface AppContextInterface {
  config: any
  menu: {
    main: LinkItem[]
    footer: LinkItem[]
    [key: string]: LinkItem[]
  }
  captcha: {
    siteKey: string,
    altSiteKey: string,
    provider: string
  }
  extraLinks: {[key: string]: string},
  publicAssetPrefix: string
  isEditorMode: boolean
  isDevelopMode: boolean
  locale: Locale
}


export interface PageSpecificModelData {
  product: Product
  collection: Collection
  collections: CollectionListItem[]
  article?: any
  page?: any
  order: Order
  orders: OrderListItem[]
  search: any
}

export interface PaginationContextData {
  pageNumber: number,
  itemsPerPage: number,
  itemsCount: number,
}

export type CartContextType = {
  cart: Cart
  setCart: (cart: any) => void
}

export type UserContextType = {
  user: User | null
  setUser: (user: any) => void
}

export type LocaleContextType = {
  locale: Locale
}

export type SectionContextType = {
  section: PageSection
  index: number
  visible: boolean
  refState: any
}

export type SectionBlock = {
  key: string
  name: string
  props: {
    [key: string]: any
  }
}

export type PageSection = {
  key: string
  hidden?: boolean
  component: string
  props: {
    [key: string]: any
  }
  blocks: SectionBlock[]
}

type PageLayout = {
  component: string
}

export type PageSchema = {
  layout: PageLayout,
  sections: PageSection[]
}

type ChoiceValue = {
  value: string
  label: string
}

export type User = {
  _id: string
  firstName: string
  lastName: string
}

export type Pageable = {
  _id: string
  title: string
  route: string
  template: string
  image: string
}

export type OptionValue = {
  _id: string
  label: string
  value: string
}

export type Option = {
  _id: string
  name: string
  type: "text" | "image" | "color" | "product"
  values: OptionValue[]
}

export type Media = {
  type?: string
  url: string
  width?: number
  height?: number
  caption?: string
  relatedOptions?: string[]
}

export type Variant = {
  _id: string
  name: string
  values: string[]
  sku?: string
  price: number
  compareAtPrice?: number
  weight?: number
}

export type ProductListItem = Pageable & {
  price: number
  compareAtPrice?: number
  media?: Media[]
  options: Option[]
  vendor: string
  shortDescription: string
}

export type Product = ProductListItem & {
  price: string
  description: string
  hasVariants: boolean
  defaultVariant: string
  variants: Variant[]
}

export type CollectionListItem = Pageable & {

}

export type Collection = CollectionListItem & {
  products: ProductListItem[]
}

export type Article = Pageable & {

}

export type CartItem = {
  product: Product
  variant: Variant
  quantity: number
}

export type OrderProductItem = {
  product: {
    _id: string
    title: string
    image: string
    route: string
  }
  variant: {
    _id: string
    name: string
    price: number
    compareAtPrice: number
  }
  quantity: number
}

export type OrderListItem = {
  _id: string
  createdAt: string
  number: string
  grossAmount: number
  discount: number
  shippingCost: number
  netAmount: number
  paidAmount: number
  items: OrderProductItem[]
  itemsCount: number
  status: "placed" | "confirmed" | "processing" | "shipped" | "delivered" | "canceled" | "declined" | "refunded"
  paymentStatus: "unpaid" | "paid"
}

export type Address = {
  firstName: string
  lastName: string
  addressLine1: string
  addressLine2: string
  state?: string
  city: string
  postalCode: string
  country: string
}

type OrderUpdate = {
  time: string
  type: "status" | "payment" | "custom"
  value: string
}

export type Order = OrderListItem & {
  items: OrderProductItem[]
  shippingAddress: Address
  billingAddress?: Address
  billingSameAsShippingAddress: boolean
  customerName: string
  updates: OrderUpdate[]
  shippingMethod: {
    checkoutTitle: string
    providerTitle: string
  }
  paymentMethod: {
    checkoutTitle: string
    providerTitle: string
    cashOnDelivery: boolean
  }
}