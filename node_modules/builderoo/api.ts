
function getRequestProperties(method: string, data: {[key: string]: any} | undefined): RequestInit {
  return {
    method,
    body: data ? JSON.stringify(data): undefined,
    headers: {
      'Content-Type': 'application/json'
    }
  }
}

export class APIError extends Error {
  public response: Response;
  public data: any
  public status: number
  constructor(res: Response, status: number, data: any) {
    super(data.toString())
    this.response = res
    this.data = data
    this.status = status
  }
}

async function then(res: Response){
  const status = res.status
  if (status >= 500){
    const text = await res.text()
    throw new APIError(res, status, text)
  } else if (status >= 400){
    throw new APIError(res, status, await res.json())
  } else if (status >= 200 && status < 300){
    return {status, data: await res.json(), ok: true}
  }
  return {status, ok: status >= 200 && status < 300, data: await res.json()}
}

const api = {
  get: (url: string) => fetch(url).then(then),
  post: (url: string, data: {[key: string]: any}) => fetch(url, getRequestProperties("POST", data)).then(then),
  patch: (url: string, data: {[key: string]: any}) => fetch(url, getRequestProperties("PATCH", data)).then(then),
  delete: (url: string, data: {[key: string]: any}) => fetch(url, getRequestProperties("DELETE", data)).then(then),
}

export default api;