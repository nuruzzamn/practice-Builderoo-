import {useRouter} from "next/router";
import React, {useContext, useEffect, useState} from "react";
import {PaginationContext} from "../context";

/**
 * Usage:
 * const {gotoPage, currentPage, itemsPerPage, itemsCount, urlForPage, isPaging} = usePagination()
 */

function getUrlWithParam(href: string, param: string, value: string){
  const url = new URL(href, "https://n")
  url.searchParams.set(param, value)
  return url
}

export const usePagination = () => {
  const router = useRouter()
  const pagination = useContext(PaginationContext)
  const [loading, setLoading] = useState(false)

  useEffect(() => {
    const handleStart = (targetUrl: string) => {
      const source = new URL(router.asPath, "https://r")
      const target = new URL(targetUrl, "https://r")

      if (source.pathname == target.pathname){
        const sourcePage = source.searchParams.get("page")
        const targetPage = target.searchParams.get("page")
        if (sourcePage != targetPage){
          setLoading(true)
        }
      }
    }

    const handleStop = () => {
      setLoading(false)
    }

    router.events.on("routeChangeStart", handleStart)
    router.events.on("routeChangeComplete", handleStop)
    router.events.on("routeChangeError", handleStop)

    return () => {
      router.events.off("routeChangeStart", handleStart)
      router.events.off("routeChangeComplete", handleStop)
      router.events.off("routeChangeError", handleStop)
    }
  }, [router])

  return {
    loading,
    currentPage: pagination.pageNumber || 1,
    itemsPerPage: pagination.itemsPerPage || 0,
    totalItems: pagination.itemsCount || 0,
    totalPages: ((pagination.itemsCount || 0)/(pagination.itemsPerPage || 10)),
    gotoPage: (page: number, event: React.MouseEvent<HTMLElement>) => {
      try {
        if (event){
          event.preventDefault()
        }
      } catch (e) {

      }
      const url = getUrlWithParam(router.asPath, "page", page.toString())
      return router.push({
        pathname: router.pathname,
        query: {
          route: url.pathname, // router.route is = router.pathname which is basically the template. But we need Link route.
          ...router.query,
          page
        },
      }, `${url.pathname}${url.search}`)
    },
    urlForPage: (page: number) => {
      // TODO: router.asPath may not be suitable here. See: https://nextjs.org/docs/pages/api-reference/functions/use-router
      const url = getUrlWithParam(router.asPath, "page", page.toString())
      return `${url.pathname}${url.search}`
    }
  }
}