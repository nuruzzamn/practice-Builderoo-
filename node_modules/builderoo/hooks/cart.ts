import {useContext, useCallback} from "react";
import {CartContext} from "../context";
import api from "../api";
import {Product, Variant} from "../types";
import {useCart} from "./simple";


async function callCartApi(method: (url: string, data: {[key: string]: any}) => Promise<any>, product: any, variant: any, quantity?: any, setCart?: (data: any) => void){
  return method("/api/cart", {
    product: product._id,
    variant: variant._id,
    quantity: quantity
  }).then(({status, data}) => {
    setCart!(data)
    return {status, data}
  })
}

export const useCartItemQuantity = (product: Partial<Product>, variant?: Variant | null) => {
  const cart = useCart()
  const setCart = useContext(CartContext).setCart

  const set = useCallback((count: number) => {
     return callCartApi(api.patch, product, variant, count, setCart)
  }, [product, variant, setCart])

  const add = useCallback((count: number) => {
    return callCartApi(api.post, product, variant, count, setCart)
  }, [product, variant, setCart])

  const remove = useCallback(() => {
    return callCartApi(api.delete, product, variant, undefined, setCart)
  }, [product, variant, setCart])

  if (!variant){
    return {quantity: 0, set, add, remove}
  }

  const item = cart?.items?.find(item => item.product._id == product._id && item.variant._id == variant._id)
  const quantity = item ? item.quantity : 0

  return {quantity, set, add, remove}
}
