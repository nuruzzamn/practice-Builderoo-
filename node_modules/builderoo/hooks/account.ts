import {useCallback, useContext, useRef} from "react";
import {UserContext} from "../context";
import api from "../api";
import {useApp} from "./simple";

declare global {
  interface Window {
    grecaptcha: {
      ready: (func: () => void) => void,
      execute: (siteKey: string, action: any) => Promise<string>,
      getResponse: () => string
    }
  }
}

function onCaptchaResult(ref: any, captchaInfo: any, action: string, reject: any, onToken: (token: string, siteKey: string) => void) {
  const captcha = window.grecaptcha

  if (!captcha) {
    return reject({error: "invalid-captcha", message: "Captcha module not loaded."})
  }

  if (ref.current.visible){
    if (!ref.current.verified()){
      return reject({error: "invalid-captcha", message: "Captcha not completed."})
    }
    return onToken(captcha.getResponse(), captchaInfo.altSiteKey)
  }
  captcha.ready(() => {
    captcha.execute(captchaInfo.siteKey, {action}).then((token: string) => {
      onToken(token, captchaInfo.siteKey)
    }).catch(() => {
      reject({error: "invalid-captcha", message: "Captcha execution error."})
    });
  });
}

function handleResponse(request: Promise<any>, resolve: any, reject: any, ref: any){
  request.then(({status, ok, data}) => {
    if (ok){
      return resolve(data)
    }
    const error = data.error
    if (error === "captcha-score-low"){
      ref?.current.loadAltCaptcha()
    }
    reject(data)
  }).catch((e) => {
    reject(e)
  })
}

export const useAccount = () => {
  const {setUser} = useContext(UserContext)
  const ref = useRef(null)
  const app = useApp()
  const captchaInfo = app?.captcha
  const verifyToken = useRef<any>()

  const login = useCallback(({username, password}: {username: string, password: string}) => {
    return new Promise((resolve, reject) => {
      onCaptchaResult(ref, captchaInfo, "login", reject, (captcha, captchaSiteKey) => {
        handleResponse(api.post('/api/account/login', {username, password, captcha, captchaSiteKey}), (data: any) => {
          setUser(data.user)
          resolve(data)
        }, reject, ref)
      })
    })
  }, [])

  const signup = useCallback(({firstName, lastName, username, password}: {firstName: string, lastName: string, username: string, password: string}) => {
    return new Promise((resolve, reject) => {
      onCaptchaResult(ref, captchaInfo, "register", reject, (captcha, captchaSiteKey) => {
        handleResponse(api.post('/api/account/signup', {action: "signup", firstName, lastName, username, password, captcha, captchaSiteKey}), (data: any) => {
          console.log(data, "MMM")
          if (data && data.status == "code-verification-required"){
            verifyToken.current = data.token
          } else if (data && data.user){
            setUser(data.user)
          }
          resolve(data)
        }, reject, ref)
      })
    })
  }, [])

  const verify = useCallback(({code}: {code: string}) => {
    return new Promise((resolve, reject) => {
      handleResponse(api.post('/api/account/signup', {action: "verify", code, token: verifyToken.current}), (data: any) => {
        setUser(data.user)
        resolve(data)
      }, reject, ref)
    })
  }, [])

  const logout = useCallback(() => new Promise((resolve, reject) => {
    handleResponse(api.post('/api/account/logout', {}), () => {
      setUser(null)
      resolve(null)
    }, reject, null)
  }), [])

  const requestPasswordReset = useCallback(({username}: {username: string}) => {
    return new Promise((resolve, reject) => {
      onCaptchaResult(ref, captchaInfo, "resetPassword", reject, (captcha, captchaSiteKey) => {
        handleResponse(api.post('/api/account/password', {action: "request-reset", username, captcha, captchaSiteKey}), (data: any) => {
          verifyToken.current = data.token
          resolve(data)
        }, reject, ref)
      })
    })
  }, [])

  const resetPassword = useCallback(({code, newPassword}: {code: string, newPassword: string}) => {
    return new Promise((resolve, reject) => {
      handleResponse(api.post('/api/account/password', {action: "reset", code, newPassword, token: verifyToken.current}), (data: any) => {
        setUser(data.user)
        resolve(data)
      }, reject, ref)
    })
  }, [])

  const changePassword = useCallback(({oldPassword, newPassword}: {oldPassword: string, newPassword: string}) => {
    return new Promise((resolve, reject) => {
      handleResponse(api.post('/api/account/password', {action: "change", oldPassword, newPassword}), (data: any) => {
        resolve(data)
      }, reject, ref)
    })
  }, [])

  return {
    login,
    logout,
    signup,
    verify,
    requestPasswordReset,
    resetPassword,
    changePassword,
    captchaRef: ref
  }
}