import React, {CSSProperties, PropsWithChildren, useContext, useMemo} from 'react';
import {useApp, useConfig} from "../hooks/simple";

type ImageProps = Omit<JSX.IntrinsicElements['img'], 'src' | 'srcSet' | 'ref' | 'alt' | 'loading'> & {
  src: string
  alt: string
  loading?: "lazy" | "eager" | undefined
  placeholder?: string
  unoptimized?: boolean
}

export const Image = React.forwardRef<HTMLImageElement, ImageProps>(function ImageComponent(
  {src, style, placeholder, loading = "lazy", unoptimized = false, ...rest}, ref) {

  const config = useConfig<any>()
  const {publicAssetPrefix} = useApp()
  const imageSizes = config.productImageSizes

  const newStyles: CSSProperties | undefined = placeholder && placeholder.length > 0 ? {
    color: "transparent",
    backgroundSize: "cover",
    backgroundPosition: "50% 50%",
    backgroundRepeat: "no-repeat",
    backgroundImage: `url("${placeholder}")`,
    ...style
  } : style

  if (src && src.startsWith("/") && !src.startsWith("//")){
    src = `${publicAssetPrefix}${src}`
  }

  const srcSet = useMemo(() => {
    if (!src || unoptimized) return undefined
    const url = new URL(src)
    return imageSizes.map(size => {
      url.searchParams.set("w", size[0].toString())
      url.searchParams.set("h", size[1].toString())
      return `${url.href} ${size[0]}w`
    }).join(', ')
  }, [src])

  return (
    <img
      ref={ref}
      loading={loading}
      decoding="async"
      {...rest}
      style={newStyles}
      srcSet={srcSet}
      src={src}
    />
  )
})
