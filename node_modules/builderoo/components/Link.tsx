import React from 'react';
import NextLink, { LinkProps as NextLinkProps } from 'next/link';
import {__useInternalExtraLinks, useIsDevelopMode, useIsEditorMode} from "../hooks/simple";
import {UrlObject} from "url";

declare type Url = string | UrlObject;

type LinkTo = {
  route: string
  template?: string
}

type LinkPropsWithoutHref = React.PropsWithChildren<
  Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, keyof NextLinkProps> & Omit<NextLinkProps, "href">
>

type LinkPropsReal = LinkPropsWithoutHref & {href?: Url, to?: LinkTo}


const Link = React.forwardRef<HTMLAnchorElement, LinkPropsReal>(
  function LinkComponent({href, to, as, children, ...rest}, forwardedRef) {

    const extraLinks = __useInternalExtraLinks()
    const isDevelop = useIsDevelopMode()
    const isEditor = useIsEditorMode()

    if (to){
      as = to.route
      href = {
        pathname: isDevelop ? '/[[...dev]]' : to.template,
        query: {route: to.route, template: to.template}
      }
    } else if (!href){
      href = ""
    } else if (typeof href == "string"){
      const templateRef = extraLinks[href]
      if (templateRef){
        href = {
          pathname: templateRef,
          query: {route: href, template: templateRef}
        }
      }
    }

    if (isEditor){
      rest.onClick = (e) => {
        e.preventDefault()
        console.log("Links are disabled in edit mode.")
      }
    }

    return (
      <NextLink
        as={as}
        href={href}
        children={children}
        {...rest}
      />
    )
})

export default Link