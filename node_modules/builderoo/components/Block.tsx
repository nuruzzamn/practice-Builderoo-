import React, {useEffect, useMemo, useRef, useState} from 'react';
import ReactDOM from "react-dom";
import {BlockContextInternal} from "../context";
import {useEditorContextInternal, useIsInEditMode, useSectionContextInternal} from "../hooks/simple"
import {sendMessage} from "./utils";


function Block(props: {children: any, block: any}) {
  const inEditMode = useIsInEditMode()

  if (!inEditMode){
    return (
      <BlockContextInternal.Provider value={props.block}>
        {props.children}
      </BlockContextInternal.Provider>
    )
  }

  const {section, index: sectionIndex, refState} = useSectionContextInternal()!
  const [visible, setVisible] = useState(false)
  const {children, block, ...rest} = props
  const ref = useRef<HTMLElement>(null)
  const [posState, setPosState] = useState<any>(null)

  const {sectionsSchema} = useEditorContextInternal()


  useEffect(() => {
    if (!refState || !ref.current) return;
    const sectionRect = refState.main.getBoundingClientRect()!
    const thisRect = ref.current!.getBoundingClientRect()!
    setPosState({top: thisRect.top - sectionRect.top, left: thisRect.left - sectionRect.left, width: thisRect.width, height: thisRect.height})

  }, [refState, section])


  const label = useMemo(() => {
    if (!sectionsSchema) return "Unknown"
    return sectionsSchema[section.component].blocks[block.name].label || block.name
  }, [])


  const onMouseEnter = (e: React.MouseEvent) => {
    setVisible(true)
  }

  const onMouseLeave = (e: React.MouseEvent) => {
    setVisible(false)
  }

  const onGoUp = () => sendMessage("block-move", {section: sectionIndex, block: section.blocks.indexOf(block), move: -1})
  const onGoDown = () => sendMessage("block-move", {section: sectionIndex, block: section.blocks.indexOf(block), move: 1})
  const onSettings = () => sendMessage("block-settings", {section: sectionIndex, block: section.blocks.indexOf(block)})
  const onDelete = () => sendMessage("block-delete", {section: sectionIndex, block: section.blocks.indexOf(block)})
  const onAddBlock = () => sendMessage("block-add", {section: sectionIndex, block: section.blocks.indexOf(block)})


  let portal = null
  if (posState && refState){
    portal = ReactDOM.createPortal(
      <div className={`--editor-block ${visible ? "--editor-block-over" : ""}`} style={posState}>
        { visible && (
          <>
            <div className="--editor-block-name">Block {'>'} {label}</div>
            <div className="--editor-block-tools">
              <div className="--editor-action" title="Block settings" onClick={onSettings}><div className="--editor-icon --editor-icon-settings" /></div>
              <div className="--editor-action" title="Add block before"><div className="--editor-icon --editor-icon-add-block" onClick={onAddBlock} /></div>
              <div className="--editor-action" title="Delete block"><div className="--editor-icon --editor-icon-delete-block" onClick={onDelete} /></div>
              <div className="--editor-action" title="Move block down/right" onClick={onGoDown}><div className="--editor-icon --editor-icon-down" /></div>
              <div className="--editor-action" title="Move block up/left" onClick={onGoUp}><div className="--editor-icon --editor-icon-up" /></div>
            </div>
          </>
        )}
      </div>,
      refState.portal
    )
  }


  const actualChildren = React.Children.toArray(React.Children.only(children).props.children)

  const actual = React.cloneElement(React.Children.only(children), {
    onMouseEnter,
    onMouseLeave,
    ref
  }, [...actualChildren, portal]);

  return (
    <BlockContextInternal.Provider value={block}>
      <>
        {actual}
      </>
    </BlockContextInternal.Provider>
  );
}

export default Block;