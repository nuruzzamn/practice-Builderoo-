import React, {JSX, useContext} from 'react';
import {useBlockInternal, useIsInEditMode} from "../hooks/simple";
import {SectionDataContext} from "../context";


type TextProps = Omit<JSX.IntrinsicElements['span'], 'ref'> & {
  as: React.ElementType; // this can be built-in html tags only
  value: any,
  prop?: string,
}

export const Text = React.forwardRef<HTMLSpanElement, TextProps>(function Text(props, ref) {
  const inEditMode = useIsInEditMode()
  const section = useContext(SectionDataContext)
  const block = useBlockInternal()

  const { as: Component = "span", prop, value: passedValue, ...rest } = props;

  if (!inEditMode){
    return <Component ref={ref} {...rest}>{passedValue}</Component>
  }
  const value = block ? block.props[prop!] : section?.props[prop!]

  const onChange = (e: React.FocusEvent<HTMLElement>) => {
    window.parent.postMessage({
      type: "prop-changed",
      sectionIndex: section.index,
      blockIndex: (section!.blocks || []).indexOf(block),
      prop: prop,
      value: e.target.innerText
    },"*");
  }

  return (
    <Component {...rest} contentEditable={true} onBlur={onChange} suppressContentEditableWarning={true}>
      {value}
    </Component>
  );
})

export default Text;