import React, {useRef, useState} from 'react';
import {sendMessage} from "./utils";
import {useEditorContextInternal} from "../hooks/simple";
import {SectionContextInternal} from "../context";


export function EditableSection({children, section, index}: {children: any, section: any, index: number}) {
  const [visible, setVisible] = useState(false)
  const ref = useRef<HTMLDivElement>(null)
  const portalRef = useRef<HTMLDivElement>(null)
  const [mouseAtTopHalf, setMouseAtTopHalf] = useState<boolean | null>(null)

  const [pinned, setPinned] = useState(false)
  const {sectionsSchema} = useEditorContextInternal()

  const hasBlocks = !sectionsSchema ? false : Object.keys(sectionsSchema[section.component].blocks).length > 0

  const onMouseEnter = (e: React.MouseEvent) => {
    setVisible(true)
  }

  const onMouseLeave = (e: React.MouseEvent) => {
    setVisible(false)
    setMouseAtTopHalf(null)
  }

  const onMouseMove = (e: React.MouseEvent) => {
    const {top, height} = ref.current!.getBoundingClientRect()
    if (e.clientY < top + height/2 && !mouseAtTopHalf){
      setMouseAtTopHalf(true)
    } else if (e.clientY > top + height/2 && (mouseAtTopHalf == true || mouseAtTopHalf == null)){
      setMouseAtTopHalf(false)
    }
  }

  const onGoUp = () => sendMessage("section-move", {section: index, move: -1})
  const onGoDown = () => sendMessage("section-move", {section: index, move: 1})
  const onHide = () => sendMessage("section-hide", {section: index})
  const onDelete = () => sendMessage("section-delete", {section: index})
  const onSettings = () => sendMessage("section-settings", {section: index})
  const onSectionAddBlock = () => sendMessage("block-add", {section: index, block: -1})

  const onAddSectionAbove = () => sendMessage("section-add", {section: index, move: 0})
  const onAddSectionBelow = () => sendMessage("section-add", {section: index, move: 1})


  const onClickCapture = (e: React.MouseEvent<HTMLDivElement>) => {
    console.log("Click capture")
    e.preventDefault()
    e.stopPropagation()
  }

  return (
    <SectionContextInternal.Provider value={{section, visible, index, refState: ref.current && visible ? {main: ref.current, portal: portalRef.current} : null}}>
      <div onMouseEnter={onMouseEnter} onMouseMove={onMouseMove} onMouseLeave={onMouseLeave} ref={ref} className={visible ? "--editor-section": ""}>
        { visible && (
          <div className="--editor-over">
            { mouseAtTopHalf && (<button className="--editor-add-section-above" onClick={onAddSectionAbove}>Add Section</button>) }
            { mouseAtTopHalf == false && (<button className="--editor-add-section-below" onClick={onAddSectionBelow}>Add Section</button>) }
            <div className="--editor-section-name">Section {'>'} {section.component}</div>
            <div className="--editor-section-tools">
              <div className="--editor-action" title="Section settings"><div className="--editor-icon --editor-icon-settings" onClick={onSettings} /></div>
              { hasBlocks && (
                <div className="--editor-action" title="Add block"><div className="--editor-icon --editor-icon-add-block" onClick={onSectionAddBlock} /></div>
              )}
              <div className="--editor-action" title="Hide section"><div className="--editor-icon --editor-icon-eye" onClick={onHide} /></div>
              <div className="--editor-action" title="Delete section"><div className="--editor-icon --editor-icon-delete-block" onClick={onDelete} /></div>
              <div className="--editor-action" title="Move section down"><div className="--editor-icon --editor-icon-down" onClick={onGoDown} /></div>
              <div className="--editor-action" title="Move section up"><div className="--editor-icon --editor-icon-up" onClick={onGoUp} /></div>
            </div>
          </div>
        )}

        <div ref={portalRef} className="--editor-portal"></div>

        {children}

      </div>
    </SectionContextInternal.Provider>
  );
}

export function AddSectionWhenEmpty(){
  return (
    <div className="--editor-section">
      <div className="--editor-over">
      </div>
      <div className="--editor-add-section-empty-root">
        <button className="--editor-add-section-empty" onClick={() => sendMessage("section-add", {section: 0, move: 0})}>Add Section</button>
      </div>
    </div>
  )
}